using NUnit.Framework;
using SpiceShop.Enums;
using SpiceShop.Helpers;
using System;
using SpiceShop.Util;
using SpiceShop.Models;

namespace SpiceShop;

public class CreateOrderTests : SpicesShopTestBase
{
    //–ë—ã—Å—Ç—Ä—ã–π –æ–±—â–∏–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    [Test, Category("Positive")]
    [TestCase("Shafran", UnitType.Grams, 1000, 1000, "Vadim Volkov")]
    [TestCase("–ë–∞–∑–∞–ª–∏–∫", UnitType.Pieces, 1000, 1, "–í–∞–¥–∏–º –í–æ–ª–∫–æ–≤")]
    [TestCase("–ö–æ—Ä–∏–∞–Ω–¥—Ä", UnitType.Grams, 1000, 100, "–ú–∞–π–∫–ª –¥–µ –°–∞–Ω—Ç–∞")]
    [TestCase("–ö–æ—Ä–∏–∞–Ω–¥—Ä", UnitType.Pieces, 1000, 10, "I Dont Know My Name")]
    public void CreateOrder_Smoke(string SpiceName, UnitType UnitType, int Volume, int OrderQuantity, string CustomerName)
    {
        // arrange
        var spiceId = Client.Spices.AddSpice(SpiceName, UnitType, Volume);
        // act
        var orderId = Client.Orders.CreateOrder(spiceId, OrderQuantity, CustomerName);
        // assert
        Assert.IsNotNull(orderId); // –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω

        //output
        Console.WriteLine($"Created SpiceId: {spiceId}.");
        Console.WriteLine($"Created OrderId: {orderId}.");
        Console.WriteLine($"Order: {CustomerName} | {spiceId} ({SpiceName}) | {OrderQuantity}/{Volume} {UnitType}");
    }


    //–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

    [Test, Category("Negative"), Category("Customer Name")]
    [TestCase(null)] // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null
    [TestCase("")] // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    [TestCase("   ")] // —Å—Ç—Ä–æ–∫–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
    [TestCase("va")] // –º–µ–Ω—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ min = 3
    [TestCase("VeryLongNameVeryLongName")] // –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ max = 20
    [TestCase("123")] // —Ü–∏—Ñ—Ä—ã —Å—Ç—Ä–æ–∫–æ–π
    [TestCase("!‚Ññ;%:?*()_")] // —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    [TestCase("–í–∞–¥  –∏–º –í–æ–ª–∫–æ–≤")] //–Ω–∞–ª–∏—á–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ (–¥–≤–∞ –ø—Ä–æ–±–µ–ª–∞ —Ä—è–¥–æ–º)
    [TestCase(" –í–∞–¥–∏–º")] // –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞
    [TestCase("    –í–∞–¥–∏–º")] // –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–±—É–ª—è—Ü–∏–∏. \t - –æ—Ç—Å–µ–∫–∞–µ—Ç—Å—è –∏–∑ –∑–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏–º–≤–æ–ª–∞
    [TestCase("–í–∞d–∏m")] // —Å–º–µ—Å—å –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    [TestCase("–í–∞–¥–∏–º ")] // –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–±–µ–ª–æ–º
    [TestCase("–í–∞–¥–∏–º –í–æ–ª–∫–æ–≤!")] // –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–≥–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞
    [TestCase("–í–∞–¥–∏–º üôÇ")] // –Ω–∞–ª–∏—á–∏–µ —Å–º–∞–π–ª–∞ unicode
    [TestCase("Î∞îÎîîÎØ∏ Î≥ºÏΩîÌîÑ")] // –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–µ–≥–æ—Å—è –∫ –∫–∏—Ä–∏–ª–∏—Ü–µ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ (–∫–æ—Ä–µ–π—Å–∫–∏–π)
    [TestCase("‡¶≠‡ßç‡¶Ø‡¶æ‡¶°‡¶ø‡¶Æ ‡¶≠‡¶≤‡¶ï‡¶≠")] // –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–µ–≥–æ—Å—è –∫ –∫–∏—Ä–∏–ª–∏—Ü–µ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ (–±–µ–Ω–≥–∞–ª—å—Å–∫–∏–π)
    [TestCase("◊ï◊ï◊ê÷∑◊ì◊ô◊ù ◊ï◊ï◊ê÷∏◊ú◊ß◊ê÷∏◊ï◊ï")] // –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–µ–≥–æ—Å—è –∫ –∫–∏—Ä–∏–ª–∏—Ü–µ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ (–∏–¥–∏—à)
    [TestCase("„É¥„Ç°„Éá„Ç£„É†„Éª„É¥„Ç©„É´„Ç≥„Éï")] // –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–µ–≥–æ—Å—è –∫ –∫–∏—Ä–∏–ª–∏—Ü–µ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ (—è–ø–æ–Ω—Å–∫–∏–π)

    public void CreateOrder_WithInvalidCustomerName(string customerName)
    {
        // arrange
        var spiceName = "–ü–µ—Ç—Ä—É—à–∫–∞";
        var unitType = UnitType.Grams;
        var volume = int.MaxValue;
        var orderQuantity = 200;

        var spiceId = Client.Spices.AddSpice(spiceName, unitType, volume);

        // act & assert

        var ex = Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(spiceId, orderQuantity, customerName));
        Console.WriteLine(ex);
    }

    [Test, Category("Negative"), Category("Order Quantity")]
    [TestCase(null, UnitType.Grams)]
    [TestCase(null, UnitType.Pieces)]
    [TestCase(0, UnitType.Grams)]
    [TestCase(0, UnitType.Pieces)]
    [TestCase(-5, UnitType.Grams)]
    [TestCase(-5, UnitType.Pieces)]
    [TestCase(9, UnitType.Grams)]
    [TestCase(1001, UnitType.Grams)]
    [TestCase(11, UnitType.Pieces)]
    [TestCase(int.MinValue, UnitType.Grams)]
    [TestCase(int.MinValue, UnitType.Pieces)]
    [TestCase(int.MaxValue, UnitType.Grams)]
    [TestCase(int.MaxValue, UnitType.Pieces)]
    [TestCase(int.MaxValue, UnitType.Grams)]
    [TestCase(int.MaxValue, UnitType.Pieces)]
    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ IDE

    public void TestCreateOrder_Negative_InvalidOrderQuantityTowardsUnitType(int orderQuantity, UnitType unitType)
    {
        // Arrange
        var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", unitType, int.MaxValue);

        // Act & Assert
        var ex = Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(spiceId, orderQuantity, "–í–∞–¥–∏–º –í–æ–ª–∫–æ–≤"));
        Console.WriteLine(ex);

    }


    [Test, Category("Negative"), Category("Order Quantity")]
    [TestCase(501, UnitType.Grams, 500)] // +1 –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –æ–±—å–µ–º–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
    [TestCase(100, UnitType.Grams, 0)] // –æ–±—ä–µ–º 0, –Ω–æ –≤ –∑–∞–∫–∞–∑–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≥—Ä–∞–º–º–∞—Ö
    [TestCase(5, UnitType.Pieces, 4)] // +1 –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –æ–±—å–µ–º–∞ –≤ —à—Ç—É–∫–∞—Ö
    [TestCase(5, UnitType.Pieces, 0)] // –æ–±—ä–µ–º 0, –Ω–æ –≤ –∑–∞–∫–∞–∑–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —à—Ç—É–∫–∞—Ö

    public void TestCreateOrder_Negative_InvalidOrderQuantityTowardsVolumeOfUnitType(int orderQuantity, UnitType unitType, int volume)
    {
        // Arrange
        var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", unitType, volume);

        // Act & Assert
        var ex = Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(spiceId, orderQuantity, "–í–∞–¥–∏–º –í–æ–ª–∫–æ–≤"));
        Console.WriteLine(ex);

    }


    [Test, Category("Positive"), Category("Order Quantity")]
    [TestCase(1000, UnitType.Grams, 1000)] // 1 –∫ 1 –ø–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤ –≥—Ä–∞–º–º–∞—Ö
    [TestCase(558, UnitType.Grams, 768)] // —Å—Ä–µ–¥–Ω–µ–µ –≤ –≥—Ä–∞–º–º–∞—Ö
    [TestCase(10, UnitType.Grams, 10)] // 1 –∫ 1 –ø–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤ –≥—Ä–∞–º–º–∞—Ö
    [TestCase(5, UnitType.Pieces, 5)]  // 1 –∫ 1 –ø–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤ —à—Ç—É–∫–∞—Ö
    [TestCase(2, UnitType.Pieces, 4)] // —Å—Ä–µ–¥–Ω–µ–µ –≤ —à—Ç—É–∫–∞—Ö
    [TestCase(1, UnitType.Pieces, 1)]  // 1 –∫ 1 –ø–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –≤ —à—Ç—É–∫–∞—Ö

    public void TestCreateOrder_Negative_ValidOrderQuantityTowardsVolumeOfUnitType(int orderQuantity, UnitType unitType, int volume)
    {
        // Arrange
        var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", unitType, volume);

        // act
        var orderId = Client.Orders.CreateOrder(spiceId, orderQuantity, "Customer");
        // assert
        Assert.IsNotNull(orderId); // –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω

        //output
        Console.WriteLine($"Created SpiceId: {spiceId}.");
        Console.WriteLine($"Created OrderId: {orderId}.");
        Console.WriteLine($"Order:  | {spiceId} | {orderQuantity}/{volume} {unitType}");
    }

    [Test, Category("Negative"), Category("SpiceId")]
    public void TestCreateOrder_Negative_InvalidSpiceId()
    {
        // Arrange
        var randomNewGuid = new Guid(Guid.NewGuid().ToString());
        // Act & Assert
        var ex = Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(randomNewGuid, 10, "Customer"));
        Console.WriteLine(ex);

    }





















    /*

        [Test, Category("Exception")]
        public void CreateOrder_WithShortCustomerName()
        {
            // arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Grams, 100);
            var invalidCustomerName = "–ò–≤";

            // act
            TestDelegate createOrderAction = () => Client.Orders.CreateOrder(spiceId, 10, invalidCustomerName);

            // assert
            Assert.Throws<SpiceShopException>(createOrderAction);
        }
        [Test, Category("Exception")]
        public void CreateOrder_WithLongCustomerName()
        {
            // arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Grams, 100);
            var invalidCustomerName = "–ò–≤–∞—Ñ–≤—ã–≤—Ñ—ã–≤—Ñ—ã–≤—Ñ—ã–≤—Ñ—ã–≤—Ñ–≤—ã—Ñ–≤—Ñ—ã–≤–≤—Ñ—ã–≤—Ñ—ã–≤—Ñ—ã–≤—Ñ–≤";

            // act
            TestDelegate createOrderAction = () => Client.Orders.CreateOrder(spiceId, 10, invalidCustomerName);

            // assert
            Assert.Throws<SpiceShopException>(createOrderAction);
        }


        [Test, Category("Exception")]
        [TestCase("")]
        [TestCase(null)]
        public void CreateOrder_CustomerNameIsNullOrEmpty(string invalidCustomerName)
        {
            // arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Grams, 100);

            // act
            TestDelegate createOrderAction = () => Client.Orders.CreateOrder(spiceId, 10, invalidCustomerName);

            // assert
            Assert.Throws<SpiceShopException>(createOrderAction);
        }
        [Test, Category("Exception")]
        [TestCase("!@#$%^&**()_=+-")]

        public void CreateOrder_CustomerNameIsSymbols(string invalidCustomerName)
        {
            // arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Grams, 100);

            // act
            TestDelegate createOrderAction = () => Client.Orders.CreateOrder(spiceId, 10, invalidCustomerName);

            // assert
            Assert.Throws<SpiceShopException>(createOrderAction);
        }



        [Test]
        public void CreateOrder_InvalidSpiceId_Failure()
        {
            // arrange
            var invalidSpiceId = Guid.Parse("invalid_id");
            var customerName = "John Doe";
            var orderQuantity = 500;

            // act and assert
            TestDelegate testDelegate = () => Client.Orders.CreateOrder(invalidSpiceId, orderQuantity, customerName);
            Assert.Throws<FormatException>(testDelegate);
        }

        [Test]
        public void CreateOrder_InvalidCustomerName_TooShort_Failure()
        {
            // Arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Grams, 100);
            var customerName = "Jo"; // Too short name
            var orderQuantity = 500;

            // Act & Assert
            Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(spiceId, orderQuantity, customerName));
        }

        [Test]
        public void CreateOrder_InvalidCustomerName_TooLong_Failure()
        {
            // Arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Grams, 100);
            var customerName = "John Doe John Doe John Doe"; // Too long name
            var orderQuantity = 500;

            // Act & Assert
            Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(spiceId, orderQuantity, customerName));
        }

        [Test]
        public void CreateOrder_InvalidQuantity_TooHigh_Failure()
        {
            // Arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Grams, 100);
            var customerName = "John Doe";
            var orderQuantity = 2000; // Too high quantity

            // Act & Assert
            Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(spiceId, orderQuantity, customerName));
        }

        [Test]
        public void CreateOrder_InvalidQuantity_TooLow_Failure()
        {
            // Arrange
            var spiceId = Client.Spices.AddSpice("–ü–µ—Ä–µ—Ü", UnitType.Pieces, 10); // Piece type
            var customerName = "John Doe";
            var orderQuantity = 0; // Too low quantity

            // Act & Assert
            Assert.Throws<SpiceShopException>(() => Client.Orders.CreateOrder(spiceId, orderQuantity, customerName));
        }*/
}